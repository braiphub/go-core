// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/braiphub/go-core/queue (interfaces: Queuer)

// Package queue is a generated GoMock package.
package queue

import (
	context "context"
	reflect "reflect"
	time "time"

	cache "github.com/braiphub/go-core/cache"
	gomock "github.com/golang/mock/gomock"
)

// MockQueuer is a mock of Queuer interface.
type MockQueuer struct {
	ctrl     *gomock.Controller
	recorder *MockQueuerMockRecorder
}

// MockQueuerMockRecorder is the mock recorder for MockQueuer.
type MockQueuerMockRecorder struct {
	mock *MockQueuer
}

// NewMockQueuer creates a new mock instance.
func NewMockQueuer(ctrl *gomock.Controller) *MockQueuer {
	mock := &MockQueuer{ctrl: ctrl}
	mock.recorder = &MockQueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueuer) EXPECT() *MockQueuerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockQueuer) Publish(arg0 context.Context, arg1 string, arg2 []string, arg3 Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockQueuerMockRecorder) Publish(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockQueuer)(nil).Publish), arg0, arg1, arg2, arg3)
}

// SetIdempotencyChecker mocks base method.
func (m *MockQueuer) SetIdempotencyChecker(arg0, arg1 string, arg2 time.Duration, arg3 cache.Cacherer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIdempotencyChecker", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIdempotencyChecker indicates an expected call of SetIdempotencyChecker.
func (mr *MockQueuerMockRecorder) SetIdempotencyChecker(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdempotencyChecker", reflect.TypeOf((*MockQueuer)(nil).SetIdempotencyChecker), arg0, arg1, arg2, arg3)
}

// Subscribe mocks base method.
func (m *MockQueuer) Subscribe(arg0 context.Context, arg1, arg2 string, arg3 func(context.Context, Message) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2, arg3)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockQueuerMockRecorder) Subscribe(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockQueuer)(nil).Subscribe), arg0, arg1, arg2, arg3)
}
