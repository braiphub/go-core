// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/braiphub/go-core/queue (interfaces: QueueI)

// Package queue is a generated GoMock package.
package queue

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueueI is a mock of QueueI interface.
type MockQueueI struct {
	ctrl     *gomock.Controller
	recorder *MockQueueIMockRecorder
}

// MockQueueIMockRecorder is the mock recorder for MockQueueI.
type MockQueueIMockRecorder struct {
	mock *MockQueueI
}

// NewMockQueueI creates a new mock instance.
func NewMockQueueI(ctrl *gomock.Controller) *MockQueueI {
	mock := &MockQueueI{ctrl: ctrl}
	mock.recorder = &MockQueueIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueI) EXPECT() *MockQueueIMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockQueueI) Consume(arg0 context.Context, arg1 string, arg2 func(context.Context, Message) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume", arg0, arg1, arg2)
}

// Consume indicates an expected call of Consume.
func (mr *MockQueueIMockRecorder) Consume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockQueueI)(nil).Consume), arg0, arg1, arg2)
}

// ConsumeStream mocks base method.
func (m *MockQueueI) ConsumeStream(arg0 context.Context, arg1 string, arg2 func(context.Context, Message) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsumeStream", arg0, arg1, arg2)
}

// ConsumeStream indicates an expected call of ConsumeStream.
func (mr *MockQueueIMockRecorder) ConsumeStream(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeStream", reflect.TypeOf((*MockQueueI)(nil).ConsumeStream), arg0, arg1, arg2)
}

// Produce mocks base method.
func (m *MockQueueI) Produce(arg0 context.Context, arg1 string, arg2 Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockQueueIMockRecorder) Produce(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockQueueI)(nil).Produce), arg0, arg1, arg2)
}
