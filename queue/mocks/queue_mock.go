// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/braiphub/go-core/queue (interfaces: QueueI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	queue "github.com/braiphub/go-core/queue"
	gomock "github.com/golang/mock/gomock"
)

// MockQueueI is a mock of QueueI interface.
type MockQueueI struct {
	ctrl     *gomock.Controller
	recorder *MockQueueIMockRecorder
}

// MockQueueIMockRecorder is the mock recorder for MockQueueI.
type MockQueueIMockRecorder struct {
	mock *MockQueueI
}

// NewMockQueueI creates a new mock instance.
func NewMockQueueI(ctrl *gomock.Controller) *MockQueueI {
	mock := &MockQueueI{ctrl: ctrl}
	mock.recorder = &MockQueueIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueI) EXPECT() *MockQueueIMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockQueueI) Publish(arg0 context.Context, arg1 string, arg2 queue.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockQueueIMockRecorder) Publish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockQueueI)(nil).Publish), arg0, arg1, arg2)
}

// Subscribe mocks base method.
func (m *MockQueueI) Subscribe(arg0 context.Context, arg1, arg2 string, arg3 func(context.Context, queue.Message) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2, arg3)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockQueueIMockRecorder) Subscribe(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockQueueI)(nil).Subscribe), arg0, arg1, arg2, arg3)
}
