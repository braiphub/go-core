// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/braiphub/go-core/tracer (interfaces: Tracer,Span)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tracer "github.com/braiphub/go-core/tracer"
	gomock "github.com/golang/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTracer) Close(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close.
func (mr *MockTracerMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTracer)(nil).Close), arg0)
}

// NewSpan mocks base method.
func (m *MockTracer) NewSpan(arg0 context.Context, arg1 string) (context.Context, tracer.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSpan", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(tracer.Span)
	return ret0, ret1
}

// NewSpan indicates an expected call of NewSpan.
func (mr *MockTracerMockRecorder) NewSpan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSpan", reflect.TypeOf((*MockTracer)(nil).NewSpan), arg0, arg1)
}

// MockSpan is a mock of Span interface.
type MockSpan struct {
	ctrl     *gomock.Controller
	recorder *MockSpanMockRecorder
}

// MockSpanMockRecorder is the mock recorder for MockSpan.
type MockSpanMockRecorder struct {
	mock *MockSpan
}

// NewMockSpan creates a new mock instance.
func NewMockSpan(ctrl *gomock.Controller) *MockSpan {
	mock := &MockSpan{ctrl: ctrl}
	mock.recorder = &MockSpanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpan) EXPECT() *MockSpanMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockSpan) AddEvent(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEvent", arg0)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockSpanMockRecorder) AddEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockSpan)(nil).AddEvent), arg0)
}

// Close mocks base method.
func (m *MockSpan) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSpanMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSpan)(nil).Close))
}
