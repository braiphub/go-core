// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/braiphub/go-core/hashid (interfaces: Hasher)
//
// Generated by this command:
//
//	mockgen -destination=hashid_mock.go -package=hashid . Hasher
//

// Package hashid is a generated GoMock package.
package hashid

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHasher is a mock of Hasher interface.
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
	isgomock struct{}
}

// MockHasherMockRecorder is the mock recorder for MockHasher.
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance.
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockHasher) Decode(hash string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", hash)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockHasherMockRecorder) Decode(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockHasher)(nil).Decode), hash)
}

// Generate mocks base method.
func (m *MockHasher) Generate(id uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockHasherMockRecorder) Generate(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockHasher)(nil).Generate), id)
}

// WithPrefix mocks base method.
func (m *MockHasher) WithPrefix(prefix string) Hasher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPrefix", prefix)
	ret0, _ := ret[0].(Hasher)
	return ret0
}

// WithPrefix indicates an expected call of WithPrefix.
func (mr *MockHasherMockRecorder) WithPrefix(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPrefix", reflect.TypeOf((*MockHasher)(nil).WithPrefix), prefix)
}
