// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/braiphub/go-core/log (interfaces: LoggerI)

// Package log is a generated GoMock package.
package log

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoggerI is a mock of LoggerI interface.
type MockLoggerI struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerIMockRecorder
}

// MockLoggerIMockRecorder is the mock recorder for MockLoggerI.
type MockLoggerIMockRecorder struct {
	mock *MockLoggerI
}

// NewMockLoggerI creates a new mock instance.
func NewMockLoggerI(ctrl *gomock.Controller) *MockLoggerI {
	mock := &MockLoggerI{ctrl: ctrl}
	mock.recorder = &MockLoggerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerI) EXPECT() *MockLoggerIMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerI) Debug(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerIMockRecorder) Debug(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerI)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggerI) Error(arg0 context.Context, arg1 string, arg2 error, arg3 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerIMockRecorder) Error(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerI)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockLoggerI) Fatal(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerIMockRecorder) Fatal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerI)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockLoggerI) Info(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerIMockRecorder) Info(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerI)(nil).Info), varargs...)
}

// Trace mocks base method.
func (m *MockLoggerI) Trace(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerIMockRecorder) Trace(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLoggerI)(nil).Trace), varargs...)
}

// Warn mocks base method.
func (m *MockLoggerI) Warn(arg0 context.Context, arg1 string, arg2 ...Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerIMockRecorder) Warn(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerI)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockLoggerI) With(arg0 context.Context, arg1 ...Field) LoggerI {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(LoggerI)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerIMockRecorder) With(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLoggerI)(nil).With), varargs...)
}

// Write mocks base method.
func (m *MockLoggerI) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockLoggerIMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLoggerI)(nil).Write), arg0)
}
